name: Build, Test & Deploy MamaFit API

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
  IMAGE_NAME: ${{ secrets.REGISTRY_NAME }}/mamafit-api:latest

jobs:
  test:
    name: Run .NET Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker image
        run: docker push $IMAGE_NAME

  deploy:
    name: Deploy to VPS via SSH
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/mamafit"

      - name: Deploy on VPS using Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/mamafit
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull $IMAGE_NAME || true
            docker compose down || true
            DB_CONN='${{ secrets.DB_CONN }}' \
            JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            CLOUDINARY_API_KEY='${{ secrets.CLOUDINARY_API_KEY }}' \
            CLOUDINARY_API_SECRET='${{ secrets.CLOUDINARY_API_SECRET }}' \
            MAILGUN_API_KEY='${{ secrets.MAILGUN_API_KEY }}' \
            MAILGUN_DOMAIN='${{ secrets.MAILGUN_DOMAIN }}' \
            REGISTRY_NAME='${{ secrets.REGISTRY_NAME }}' \
            docker compose up -d
