name: Docker CI/CD for .NET

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Clean and restore dependencies
        run: |
          dotnet clean
          dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Publish application
        run: dotnet publish -c Release -o out

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          no-cache: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/mamafit-api:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy application via SSH & ENV
        env:
          REGISTRY_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DB_CONN: ${{ secrets.DB_CONN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            cd /var/www/mamafit &&
            docker pull $REGISTRY_NAME/mamafit-api:latest &&
            DB_CONN="$DB_CONN" \
            JWT_SECRET="$JWT_SECRET" \
            CLOUDINARY_API_KEY="$CLOUDINARY_API_KEY" \
            CLOUDINARY_API_SECRET="$CLOUDINARY_API_SECRET" \
            MAILGUN_API_KEY="$MAILGUN_API_KEY" \
            MAILGUN_DOMAIN="$MAILGUN_DOMAIN" \
            docker compose up -d --remove-orphans
          '
