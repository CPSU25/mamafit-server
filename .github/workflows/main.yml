name: Build, Test & Deploy MamaFit API

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
  IMAGE_NAME: ${{ secrets.REGISTRY_NAME }}/mamafit-api:latest

jobs:
  test:
    name: Run .NET Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose.yaml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yaml"
          target: "~/mamafit"
          overwrite: true

      - name: Copy filebeat.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "filebeat.yml"
          target: "~/mamafit"
          overwrite: true

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd ~/mamafit
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            echo "Creating .env file"
            echo "REGISTRY_NAME=${{ secrets.REGISTRY_NAME }}" > .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
            echo "MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}" >> .env
            echo "MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}" >> .env
            echo "VPS_HOST=${{ secrets.VPS_HOST }}" >> .env
            echo "REDIS_CONN=${{ secrets.REDIS_CONN }}" >> .env
            echo "SEPAY_API_KEY=${{ secrets.SEPAY_API_KEY }}" >> .env
            echo "SEPAY_API_BASE_URI=${{ secrets.SEPAY_API_BASE_URI }}" >> .env
            echo "SEPAY_ACCOUNT_NUMBER=${{ secrets.SEPAY_ACCOUNT_NUMBER }}" >> .env
            echo "SEPAY_ACCOUNT_NAME=${{ secrets.SEPAY_ACCOUNT_NAME }}" >> .env
            echo "SEPAY_BANK_CODE=${{ secrets.SEPAY_BANK_CODE }}" >> .env
            echo "GHTK_API_TOKEN=${{ secrets.GHTK_API_TOKEN }}" >> .env
            echo "GHTK_BASE_URI=${{ secrets.GHTK_BASE_URI }}" >> .env
            echo "CONTENTFUL_SPACE_ID=${{ secrets.CONTENTFUL_SPACE_ID }}" >> .env
            echo "CONTENT_DELIVERY_KEY=${{ secrets.CONTENT_DELIVERY_KEY }}" >> .env
            echo "CONTENTFUL_ENTRY_ID=${{ secrets.CONTENTFUL_ENTRY_ID }}" >> .env
            echo "CONTENTFUL_SECRET_KEY=${{ secrets.CONTENTFUL_SECRET_KEY }}" >> .env
            echo "CONTENTFUL_MANAGEMENT_TOKEN=${{ secrets.CONTENTFUL_MANAGEMENT_TOKEN }}" >> .env
            echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
            echo "Ollama_BaseUrl=http://ollama:11434" >> .env
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            docker pull $IMAGE_NAME
            docker compose up -d --pull always --no-deps --force-recreate mamafit-api
            docker ps -a | grep mamafit-api

#  notify-success:
#    name: Notify Discord (Success)
#    runs-on: ubuntu-latest
#    needs: deploy
#    if: success()
#    steps:
#      - name: Send Success Message
#        run: |
#          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
#          curl -H "Content-Type: application/json" -X POST -d "{
#            \"embeds\": [{
#              \"title\": \"üöÄ MamaFit API - Deployment Successful\",
#              \"description\": \"‚ú® App is live at https://api.mamafit.studio/\",
#              \"color\": 5763719,
#              \"author\": {
#                \"name\": \"${{ github.actor }}\",
#                \"icon_url\": \"https://github.com/${{ github.actor }}.png\"
#              },
#              \"fields\": [
#                { \"name\": \"Repository\", \"value\": \"[${{ github.repository }}](https://github.com/${{ github.repository }})\", \"inline\": true },
#                { \"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true },
#                { \"name\": \"Commit\", \"value\": \"[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true }
#              ],
#              \"footer\": { \"text\": \"MamaFit CI/CD ‚Ä¢ GitHub Actions\" },
#              \"timestamp\": \"$TIMESTAMP\"
#            }]
#          }" ${{ secrets.DISCORD_WEBHOOK_URL }}
#
#  notify-failure:
#    name: Notify Discord (Failure)
#    runs-on: ubuntu-latest
#    needs: [ test, build-and-push, deploy ]
#    if: failure()
#    steps:
#      - name: Send Failure Message
#        run: |
#          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
#          curl -H "Content-Type: application/json" -X POST -d "{
#            \"content\": \"<@&1379069130656845824> üö® **MamaFit API** deployment failed!\",
#            \"embeds\": [{
#              \"title\": \"üí• Deployment Failed\",
#              \"description\": \"‚ùå CI/CD pipeline failed.\",
#              \"color\": 15158332,
#              \"author\": {
#                \"name\": \"${{ github.actor }}\",
#                \"icon_url\": \"https://github.com/${{ github.actor }}.png\"
#              },
#              \"fields\": [
#                { \"name\": \"Repository\", \"value\": \"[${{ github.repository }}](https://github.com/${{ github.repository }})\", \"inline\": true },
#                { \"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true },
#                { \"name\": \"Commit\", \"value\": \"[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true },
#                { \"name\": \"Logs\", \"value\": \"[View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\", \"inline\": true }
#              ],
#              \"footer\": { \"text\": \"MamaFit CI/CD ‚Ä¢ GitHub Actions\" },
#              \"timestamp\": \"$TIMESTAMP\"
#            }]
#          }" ${{ secrets.DISCORD_WEBHOOK_URL }}
