// <auto-generated />
using System;
using System.Collections.Generic;
using MamaFit.BusinessObjects.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MamaFit.BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250613072529_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<string>("LongName")
                        .HasColumnType("text");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("MapId")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CurrentConnectionId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("HashPassword")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a3bcd12345678901234567890123456",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1240),
                            FullName = "Admin",
                            HashPassword = "u+7jaa75MJns9ST/6FSw4aQU+zSF/iNldvzpJxBFzwk=",
                            IsDeleted = false,
                            IsVerify = true,
                            RoleId = "2e7b5a97e42e4e84a08ffbe0bc05d2ea",
                            Salt = "R0kox04KXBTPFFlKjfxIzNeMzlbH1rGO/YJDtl0N894=",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1240),
                            UserEmail = "admin@mamafit.com",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ce5235c40924fd5b0792732d3fb1b6f",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1250),
                            FullName = "Staff",
                            HashPassword = "u+7jaa75MJns9ST/6FSw4aQU+zSF/iNldvzpJxBFzwk=",
                            IsDeleted = false,
                            IsVerify = true,
                            RoleId = "5ed8cfa9b62d433c88ab097b6d2baccd",
                            Salt = "R0kox04KXBTPFFlKjfxIzNeMzlbH1rGO/YJDtl0N894=",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1250),
                            UserEmail = "staff@mamafit.com",
                            UserName = "staff"
                        },
                        new
                        {
                            Id = "4c9804ecc1d645de96fcfc906cc43d6c",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1260),
                            FullName = "Manager",
                            HashPassword = "u+7jaa75MJns9ST/6FSw4aQU+zSF/iNldvzpJxBFzwk=",
                            IsDeleted = false,
                            IsVerify = true,
                            RoleId = "a3cb88edaf2b4718a9986010c5b9c1d7",
                            Salt = "R0kox04KXBTPFFlKjfxIzNeMzlbH1rGO/YJDtl0N894=",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1260),
                            UserEmail = "manager@mamafit.com",
                            UserName = "manager"
                        },
                        new
                        {
                            Id = "08ee8586464b43dd9a4507add95b281c",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1270),
                            FullName = "Designer",
                            HashPassword = "u+7jaa75MJns9ST/6FSw4aQU+zSF/iNldvzpJxBFzwk=",
                            IsDeleted = false,
                            IsVerify = true,
                            RoleId = "e5b0f987fbf44608b7a6a2d0e313b3b2",
                            Salt = "R0kox04KXBTPFFlKjfxIzNeMzlbH1rGO/YJDtl0N894=",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1270),
                            UserEmail = "designer@mamafit.com",
                            UserName = "designer"
                        },
                        new
                        {
                            Id = "eb019fbe31e6449b9b92c89b5c893b03",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1270),
                            FullName = "Branch Staff",
                            HashPassword = "u+7jaa75MJns9ST/6FSw4aQU+zSF/iNldvzpJxBFzwk=",
                            IsDeleted = false,
                            IsVerify = true,
                            RoleId = "c9118b99c0ad486dbb18560a916b630c",
                            Salt = "R0kox04KXBTPFFlKjfxIzNeMzlbH1rGO/YJDtl0N894=",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1270),
                            UserEmail = "branchstaff@mamafit.com",
                            UserName = "branchstaff"
                        },
                        new
                        {
                            Id = "29d72211a9f7480c9812d61ee17c92b9",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1280),
                            FullName = "Branch Manager",
                            HashPassword = "u+7jaa75MJns9ST/6FSw4aQU+zSF/iNldvzpJxBFzwk=",
                            IsDeleted = false,
                            IsVerify = true,
                            RoleId = "bf081015e17a41b8b1cae65b1b17cfdb",
                            Salt = "R0kox04KXBTPFFlKjfxIzNeMzlbH1rGO/YJDtl0N894=",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1280),
                            UserEmail = "branchmanager@mamafit.com",
                            UserName = "branchmanager"
                        },
                        new
                        {
                            Id = "f49aa51bbd304e77933e24bbed65b165",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1280),
                            FullName = "User",
                            HashPassword = "u+7jaa75MJns9ST/6FSw4aQU+zSF/iNldvzpJxBFzwk=",
                            IsDeleted = false,
                            IsVerify = true,
                            RoleId = "b8d237b8b6f849988d60c6c3c1d0a943",
                            Salt = "R0kox04KXBTPFFlKjfxIzNeMzlbH1rGO/YJDtl0N894=",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1280),
                            UserEmail = "user@mamafit.com",
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b8d237b8b6f849988d60c6c3c1d0a943",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(980),
                            IsDeleted = false,
                            RoleName = "User",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(980)
                        },
                        new
                        {
                            Id = "bf081015e17a41b8b1cae65b1b17cfdb",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(980),
                            IsDeleted = false,
                            RoleName = "BranchManager",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(980)
                        },
                        new
                        {
                            Id = "c9118b99c0ad486dbb18560a916b630c",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(990),
                            IsDeleted = false,
                            RoleName = "BranchStaff",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(990)
                        },
                        new
                        {
                            Id = "e5b0f987fbf44608b7a6a2d0e313b3b2",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(990),
                            IsDeleted = false,
                            RoleName = "Designer",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(990)
                        },
                        new
                        {
                            Id = "a3cb88edaf2b4718a9986010c5b9c1d7",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1000),
                            IsDeleted = false,
                            RoleName = "Manager",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1000)
                        },
                        new
                        {
                            Id = "5ed8cfa9b62d433c88ab097b6d2baccd",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1010),
                            IsDeleted = false,
                            RoleName = "Staff",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1010)
                        },
                        new
                        {
                            Id = "2e7b5a97e42e4e84a08ffbe0bc05d2ea",
                            CreatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1010),
                            IsDeleted = false,
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 6, 13, 7, 25, 29, 579, DateTimeKind.Utc).AddTicks(1010)
                        });
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUserToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int?>("TokenType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("StaffId")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Branch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BranchManagerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<string>("LongName")
                        .HasColumnType("text");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("MapId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OpeningHour")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchManagerId");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.BranchMaternityDressDetail", b =>
                {
                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<string>("MaternityDressDetailId")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("BranchId", "MaternityDressDetailId");

                    b.HasIndex("MaternityDressDetailId");

                    b.ToTable("BranchMaternityDressDetail", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.CartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MaternityDressDetailId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaternityDressDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ChatEntity.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChatRoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SenderId");

                    b.HasIndex("ChatRoomId", "CreatedAt");

                    b.ToTable("ChatMessage", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ChatEntity.ChatRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ChatRoom", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ChatEntity.ChatRoomMember", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ChatRoomId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ChatRoomId");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatRoomMember", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Component", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("StyleId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Component", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ComponentOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<int?>("ComponentOptionType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("ComponentOption", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DesignRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("DesignRequest", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<float?>("Rated")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("StyleId")
                        .HasColumnType("text");

                    b.Property<int>("TotalRating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("MaternityDress", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressCustomization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("CustomizationType")
                        .HasColumnType("integer");

                    b.Property<string>("DesignRequestId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DesignRequestId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("MaternityDressCustomization", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MaternityDressId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaternityDressId");

                    b.ToTable("MaternityDressDetail", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressSelection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ComponentOptionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MaternityDressCustomizationId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComponentOptionId");

                    b.HasIndex("MaternityDressCustomizationId");

                    b.ToTable("MaternityDressSelection");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaternityDressService", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressServiceOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemServiceType")
                        .HasColumnType("integer");

                    b.Property<string>("MaternityDressServiceId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaternityDressServiceId");

                    b.ToTable("MaternityDressServiceOption", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaternityDressTask", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("Bust")
                        .HasColumnType("real");

                    b.Property<float>("ChestAround")
                        .HasColumnType("real");

                    b.Property<float>("Coat")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<float>("DressLength")
                        .HasColumnType("real");

                    b.Property<float>("Hip")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("LegLength")
                        .HasColumnType("real");

                    b.Property<string>("MeasurementDiaryId")
                        .HasColumnType("text");

                    b.Property<float>("Neck")
                        .HasColumnType("real");

                    b.Property<float>("PantsWaist")
                        .HasColumnType("real");

                    b.Property<float>("ShoulderWidth")
                        .HasColumnType("real");

                    b.Property<float>("SleeveLength")
                        .HasColumnType("real");

                    b.Property<float>("Stomach")
                        .HasColumnType("real");

                    b.Property<float>("Thigh")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<float>("Waist")
                        .HasColumnType("real");

                    b.Property<int>("WeekOfPregnancy")
                        .HasColumnType("integer");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementDiaryId");

                    b.ToTable("Measurement", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MeasurementDiary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("AverageMenstrualCycle")
                        .HasColumnType("integer");

                    b.Property<float?>("Bust")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FirstDateOfLastPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<float?>("Hip")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfPregnancy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PregnancyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UltrasoundDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<float?>("Waist")
                        .HasColumnType("real");

                    b.Property<int>("WeeksFromUltrasound")
                        .HasColumnType("integer");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MeasurementDiary", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Milestone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MaternityDressTaskId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaternityDressTaskId");

                    b.ToTable("Milestone", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("text");

                    b.Property<string>("NotificationTitle")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("text");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OTP", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OTPType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OTP", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MeasurementDiaryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentOrderId")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<float>("ShippingFee")
                        .HasColumnType("real");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("SubTotalAmount")
                        .HasColumnType("real");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("VoucherDiscountId")
                        .HasColumnType("text");

                    b.Property<string>("WarrantyCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BranchId");

                    b.HasIndex("MeasurementDiaryId");

                    b.HasIndex("ParentOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherDiscountId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemType")
                        .HasColumnType("integer");

                    b.Property<string>("MaternityDressDetailId")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WarrantyNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MaternityDressDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderItemServiceOption", b =>
                {
                    b.Property<string>("MaternityDressServiceOptionId")
                        .HasColumnType("text");

                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MaternityDressServiceOptionId", "OrderItemId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemServiceOption", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderItemTask", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<string>("MilestoneId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("UserId", "OrderItemId", "MilestoneId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemsTasks");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Style", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<bool?>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Style", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("Accumulated")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Gateway")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("text");

                    b.Property<string>("SepayId")
                        .HasColumnType("text");

                    b.Property<string>("SubAccount")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("TransferAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.VoucherBatch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BatchCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DiscountPercentValue")
                        .HasColumnType("integer");

                    b.Property<string>("DiscountType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("MaximumDiscountValue")
                        .HasColumnType("real");

                    b.Property<float?>("MinimumOrderValue")
                        .HasColumnType("real");

                    b.Property<int?>("RemainingQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VoucherBatch", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.VoucherDiscount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("VoucherBatchId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherBatchId");

                    b.ToTable("VoucherDiscount");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.WarrantyHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WarrantyRequestId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WarrantyRequestId");

                    b.ToTable("WarrantyHistory", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.WarrantyRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float?>("Fee")
                        .HasColumnType("real");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFactoryError")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginalOrderItemId")
                        .HasColumnType("text");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WarrantyOrderItemId")
                        .HasColumnType("text");

                    b.Property<int>("WarrantyRound")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalOrderItemId");

                    b.HasIndex("WarrantyOrderItemId");

                    b.ToTable("WarrantyRequest", (string)null);
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Address", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUser", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUserToken", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Token")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Appointment", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Branch", "Branch")
                        .WithMany("Appointments")
                        .HasForeignKey("BranchId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branch");

                    b.Navigation("Staff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Branch", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "BranchManager")
                        .WithMany("Branch")
                        .HasForeignKey("BranchManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BranchManager");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.BranchMaternityDressDetail", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Branch", "Branch")
                        .WithMany("BranchMaternityDressDetail")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDressDetail", "MaternityDressDetail")
                        .WithMany("BranchMaternityDressDetails")
                        .HasForeignKey("MaternityDressDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("MaternityDressDetail");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.CartItem", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDressDetail", "MaternityDressDetail")
                        .WithMany("CartItems")
                        .HasForeignKey("MaternityDressDetailId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MaternityDressDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ChatEntity.ChatMessage", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ChatEntity.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ChatEntity.ChatRoom", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", null)
                        .WithMany("CreatedChatRooms")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ChatEntity.ChatRoomMember", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ChatEntity.ChatRoom", "ChatRoom")
                        .WithMany("Members")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("ChatRoomMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Component", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Style", "Style")
                        .WithMany("Components")
                        .HasForeignKey("StyleId");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ComponentOption", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Component", "Component")
                        .WithMany("Options")
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DesignRequest", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.OrderItem", "OrderItem")
                        .WithOne("DesignRequest")
                        .HasForeignKey("MamaFit.BusinessObjects.Entity.DesignRequest", "OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("DesignRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OrderItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Feedback", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.OrderItem", "OrderItem")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OrderItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDress", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressCustomization", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.DesignRequest", "DesignRequest")
                        .WithMany("MaternityDressCustomizations")
                        .HasForeignKey("DesignRequestId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.OrderItem", "OrderItem")
                        .WithOne("MaternityDressCustomization")
                        .HasForeignKey("MamaFit.BusinessObjects.Entity.MaternityDressCustomization", "OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("DressCustomizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DesignRequest");

                    b.Navigation("OrderItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressDetail", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDress", "MaternityDress")
                        .WithMany("Details")
                        .HasForeignKey("MaternityDressId");

                    b.Navigation("MaternityDress");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressSelection", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ComponentOption", "ComponentOption")
                        .WithMany("MaternityDressSelections")
                        .HasForeignKey("ComponentOptionId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDressCustomization", "MaternityDressCustomization")
                        .WithMany("MaternityDressSelections")
                        .HasForeignKey("MaternityDressCustomizationId");

                    b.Navigation("ComponentOption");

                    b.Navigation("MaternityDressCustomization");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressServiceOption", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDressService", "MaternityDressService")
                        .WithMany("MaternityDressServiceOptions")
                        .HasForeignKey("MaternityDressServiceId");

                    b.Navigation("MaternityDressService");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Measurement", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.MeasurementDiary", "MeasurementDiary")
                        .WithMany("Measurements")
                        .HasForeignKey("MeasurementDiaryId");

                    b.Navigation("MeasurementDiary");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MeasurementDiary", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("MeasurementDiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Milestone", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDressTask", "MaternityDressTask")
                        .WithMany("Milestones")
                        .HasForeignKey("MaternityDressTaskId");

                    b.Navigation("MaternityDressTask");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Notification", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OTP", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("OTPs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Order", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.MeasurementDiary", "MeasurementDiary")
                        .WithMany("Orders")
                        .HasForeignKey("MeasurementDiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.Order", "ParentOrder")
                        .WithMany()
                        .HasForeignKey("ParentOrderId");

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MamaFit.BusinessObjects.Entity.VoucherDiscount", "VoucherDiscount")
                        .WithMany()
                        .HasForeignKey("VoucherDiscountId");

                    b.Navigation("Address");

                    b.Navigation("Branch");

                    b.Navigation("MeasurementDiary");

                    b.Navigation("ParentOrder");

                    b.Navigation("User");

                    b.Navigation("VoucherDiscount");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderItem", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDressDetail", "MaternityDressDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("MaternityDressDetailId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MamaFit.BusinessObjects.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MaternityDressDetail");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderItemServiceOption", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.MaternityDressServiceOption", "MaternityDressServiceOption")
                        .WithMany()
                        .HasForeignKey("MaternityDressServiceOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaternityDressServiceOption");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderItemTask", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Milestone", "Milestone")
                        .WithMany("OrderItemTasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.OrderItem", "OrderItem")
                        .WithMany("OrderItemTasks")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("OrderItemTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milestone");

                    b.Navigation("OrderItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Style", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Category", "Category")
                        .WithMany("Styles")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Transaction", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.VoucherDiscount", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("VoucherDiscounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MamaFit.BusinessObjects.Entity.VoucherBatch", "VoucherBatch")
                        .WithMany("VoucherDiscounts")
                        .HasForeignKey("VoucherBatchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");

                    b.Navigation("VoucherBatch");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.WarrantyHistory", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.WarrantyRequest", "WarrantyRequest")
                        .WithMany("WarrantyHistories")
                        .HasForeignKey("WarrantyRequestId");

                    b.Navigation("WarrantyRequest");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.WarrantyRequest", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.OrderItem", "OriginalOrderItem")
                        .WithMany("WarrantyRequests")
                        .HasForeignKey("OriginalOrderItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MamaFit.BusinessObjects.Entity.OrderItem", "WarrantyOrderItem")
                        .WithMany()
                        .HasForeignKey("WarrantyOrderItemId");

                    b.Navigation("OriginalOrderItem");

                    b.Navigation("WarrantyOrderItem");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Appointments");

                    b.Navigation("Branch");

                    b.Navigation("CartItems");

                    b.Navigation("ChatRoomMemberships");

                    b.Navigation("CreatedChatRooms");

                    b.Navigation("DesignRequests");

                    b.Navigation("DressCustomizations");

                    b.Navigation("Feedbacks");

                    b.Navigation("MeasurementDiaries");

                    b.Navigation("Notifications");

                    b.Navigation("OTPs");

                    b.Navigation("OrderItemTasks");

                    b.Navigation("Orders");

                    b.Navigation("SentMessages");

                    b.Navigation("Token");

                    b.Navigation("VoucherDiscounts");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Branch", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BranchMaternityDressDetail");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Category", b =>
                {
                    b.Navigation("Styles");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ChatEntity.ChatRoom", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Component", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ComponentOption", b =>
                {
                    b.Navigation("MaternityDressSelections");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DesignRequest", b =>
                {
                    b.Navigation("MaternityDressCustomizations");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDress", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressCustomization", b =>
                {
                    b.Navigation("MaternityDressSelections");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressDetail", b =>
                {
                    b.Navigation("BranchMaternityDressDetails");

                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressService", b =>
                {
                    b.Navigation("MaternityDressServiceOptions");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MaternityDressTask", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MeasurementDiary", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Milestone", b =>
                {
                    b.Navigation("OrderItemTasks");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderItem", b =>
                {
                    b.Navigation("DesignRequest");

                    b.Navigation("Feedbacks");

                    b.Navigation("MaternityDressCustomization");

                    b.Navigation("OrderItemTasks");

                    b.Navigation("WarrantyRequests");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Style", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.VoucherBatch", b =>
                {
                    b.Navigation("VoucherDiscounts");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.WarrantyRequest", b =>
                {
                    b.Navigation("WarrantyHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
