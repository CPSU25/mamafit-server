// <auto-generated />
using System;
using System.Collections.Generic;
using MamaFit.BusinessObjects.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MamaFit.BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250507071406_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BranchDress", b =>
                {
                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DressId")
                        .HasColumnType("uuid");

                    b.HasKey("BranchId", "DressId");

                    b.HasIndex("DressId");

                    b.ToTable("BranchDress");
                });

            modelBuilder.Entity("DressDressCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DressId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId", "DressId");

                    b.HasIndex("DressId");

                    b.ToTable("DressDressCategory");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.Property<bool?>("isVerify")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ApointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApointmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("BranchManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Image")
                        .HasColumnType("text[]");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchManagerId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Dress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DressName")
                        .HasColumnType("text");

                    b.Property<List<string>>("Image")
                        .HasColumnType("text[]");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Dress");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DressCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DressCategory");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DressComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ComponentName")
                        .HasColumnType("text");

                    b.Property<string>("ComponentType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DressId");

                    b.ToTable("DressComponent");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DressComponentOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DressComponentId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Image")
                        .HasColumnType("text[]");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DressComponentId");

                    b.ToTable("DressComponentOption");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DressId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("Rated")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DressId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MeasurementDiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("BellyCircumference")
                        .HasColumnType("real");

                    b.Property<float>("BustCircumference")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("HipCircumference")
                        .HasColumnType("real");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<float>("ShoulderWidth")
                        .HasColumnType("real");

                    b.Property<float>("UnderBustCircumference")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("MeasurementDiary");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DressId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DressId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProfileName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.TaskOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("isUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DesignerId");

                    b.HasIndex("OrderId");

                    b.ToTable("TaskOrder");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.VoucherDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<float?>("ConditionFee")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float?>("DiscountAmount")
                        .HasColumnType("real");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VoucherName")
                        .HasColumnType("text");

                    b.Property<bool?>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("VoucherDiscount");
                });

            modelBuilder.Entity("BranchDress", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.Dress", null)
                        .WithMany()
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DressDressCategory", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.DressCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.Dress", null)
                        .WithMany()
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Appointment", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Branch", "Branch")
                        .WithMany("Appointment")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Branch", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "BranchManager")
                        .WithMany()
                        .HasForeignKey("BranchManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchManager");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DressComponent", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Dress", null)
                        .WithMany("Component")
                        .HasForeignKey("DressId");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DressComponentOption", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.DressComponent", null)
                        .WithMany("Option")
                        .HasForeignKey("DressComponentId");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Feedback", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Dress", "Dress")
                        .WithMany("Feedback")
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Feedback")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.MeasurementDiary", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Profile", "Profile")
                        .WithMany("Diary")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Order", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.OrderDetail", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.Dress", "Dress")
                        .WithMany()
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Profile", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "User")
                        .WithMany("Profile")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.TaskOrder", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", "Designer")
                        .WithMany("TaskOrder")
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MamaFit.BusinessObjects.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Designer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.VoucherDiscount", b =>
                {
                    b.HasOne("MamaFit.BusinessObjects.Entity.ApplicationUser", null)
                        .WithMany("Voucher")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Order");

                    b.Navigation("Profile");

                    b.Navigation("TaskOrder");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Branch", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Dress", b =>
                {
                    b.Navigation("Component");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.DressComponent", b =>
                {
                    b.Navigation("Option");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Order", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("MamaFit.BusinessObjects.Entity.Profile", b =>
                {
                    b.Navigation("Diary");
                });
#pragma warning restore 612, 618
        }
    }
}
